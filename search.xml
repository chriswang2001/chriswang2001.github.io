<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建github_pages个人博客</title>
    <url>/2023/02/19/Hexo%E6%90%AD%E5%BB%BAgithub-pages%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ul>
<li><a class="link"   href="http://nodejs.org/" >Node.js <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="http://git-scm.com/" >Git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="Github-pages"><a href="#Github-pages" class="headerlink" title="Github pages"></a>Github pages</h2><p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。你可以在 GitHub 的 github.io 域或自己的自定义域上托管站点。(省下了自己买服务器的钱，非常适合于搭建个人主页或者博客)</p>
<ol>
<li><p>新建github存储库，存储库必须命名为 &lt;username&gt;.github.io（username就是你的用户名）</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://docs.github.com/assets/cb-34195/images/help/pages/create-repository-name-pages.png"
                      alt="username"
                ></p>
</li>
<li><p>克隆仓库，创建index.html，写入hello world（可选）</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/username/username.github.io</span><br><span class="line"><span class="built_in">cd</span> username.github.io</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; index.html</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>推送到github后，访问 &lt;username&gt;.github.io , 查看github pages是否搭建成功（可选）</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>上述操作成功搭建了github pages。但是自己编写网页文件来搭建一个好看易用的网站是一件很耗时耗力的事情。好在我们可以通过许多优秀的博客框架（例如hexo、wordpress）来规避掉其中繁琐的操作，而专注于内容本身。</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><ol>
<li><p>通过npm安装hexo</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>初始化文件夹（&lt;folder&gt;即github pages仓库，需要先删除之前用于测试的index.html）</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt; </span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试hexo是否初始化成功</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate &amp; hexo server</span><br></pre></td></tr></table></figure></div>

<p> 执行上述命令后访问 <a class="link"   href="http://localhost:4000/" >http://localhost:4000 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>在储存库中建立 .github&#x2F;workflows&#x2F;pages.yml，并填入以下内容</p>
 <div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">.github/workflows/pages.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># default branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">    <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">16.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;16&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure></div>

<p> node-version: “16” 中的16请替换为你本地的版本（可使用下述命令查询）</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在储存库中前往 Settings &gt; Actions &gt; General，设置github action的工作权限</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230220104350.png"
                      alt="20230220104350"
                ></p>
</li>
<li><p>将 main 分支 push 到 GitHub（注意有些存储库默认分支为master）</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>前往github action页面查看部署工作进度。当部署作业完成后，产生的页面会放在储存库中的 gh-pages 分支。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230220104631.png"
                      alt="20230220104631"
                ></p>
</li>
<li><p>在储存库中前往 Settings &gt; Pages &gt; Source，并将 branch 改为 gh-pages。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230220104710.png"
                      alt="20230220104710"
                ></p>
</li>
<li><p>前往 username.github.io 查看网站。</p>
</li>
</ol>
<h3 id="Hexo使用"><a href="#Hexo使用" class="headerlink" title="Hexo使用"></a>Hexo使用</h3><h4 id="创建新推文"><a href="#创建新推文" class="headerlink" title="创建新推文"></a>创建新推文</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="启动hexo服务器（此时可以本地访问）"><a href="#启动hexo服务器（此时可以本地访问）" class="headerlink" title="启动hexo服务器（此时可以本地访问）"></a>启动hexo服务器（此时可以本地访问）</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h4><p>hexo生态拥有丰富的主题配置，More info: <a class="link"   href="https://hexo.io/themes/" >Themes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>github pages支持自定义域名，意味着你可以通过你拥有的任意域名（而非默认的 &lt;uesrname&gt;.github.io）来访问你自己的github pages。</p>
<p>如果你还没有自己的域名，可前往各大云厂商（例如阿里云、腾讯云）购买，本文将以腾讯云为示例。</p>
<ol>
<li><p>在腾讯云域名注册下找到解析按钮</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230220110136.png"
                      alt="20230220110136"
                ></p>
</li>
<li><p>创建A记录指向 gitbub pages服务器<br>185.199.108.153 和 CNAME记录指向你自己的github.io地址（如需ipv6, 再创建一个AAAA记录指向2606:50c0:8000::153）</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/![20230220110608](httpsimage-1305582579.cos.ap-chengdu.myqcloud.com20230220110608.png).png"
                      alt="![20230220110608](httpsimage-1305582579.cos.ap-chengdu.myqcloud.com20230220110608.png)"
                ></p>
</li>
<li><p>在储存库中前往 Settings &gt; Pages &gt; Custom domain，改为你自己的域名</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230220110940.png"
                      alt="20230220110940"
                ></p>
</li>
<li><p>上一个步骤会在gh-pages分支中创建一个CNAME文件，但这个文件会在我们每次提交部署的时候被hexo覆盖。所以我们需要将这个文件放在main分支下的source文件夹里面。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230220111321.png"
                      alt="20230220111321"
                ></p>
</li>
<li><p>前往你的域名查看网站。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu搭建STM32开发环境</title>
    <url>/2023/02/16/Ubuntu%E6%90%AD%E5%BB%BASTM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="使用软件"><a href="#使用软件" class="headerlink" title="使用软件"></a>使用软件</h2><ul>
<li>代码生成：STM32CubeMX</li>
<li>编译代码：arm-none-eabi toolchain 和 make</li>
<li>调试下载：openocd（兼容多种调试器）</li>
<li>编辑代码：vscode（stm32-for-vsocde插件）</li>
</ul>
<h2 id="Stm32CubeMX"><a href="#Stm32CubeMX" class="headerlink" title="Stm32CubeMX"></a>Stm32CubeMX</h2><p><a class="link"   href="https://www.st.com/en/development-tools/stm32cubemx.html" >官网下载地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>点击下载，输入姓名邮箱后，下载链接会发到你的邮箱里面。</p>
<p>下载完成后，打开文件夹直接运行（有很多之前的教程说要下载jdk啥的，现在cubemx文件夹自带有jre无需自行下载安装）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./SetupSTM32CubeMX-xx</span><br></pre></td></tr></table></figure></div>

<h2 id="arm-none-eabi-toolchain"><a href="#arm-none-eabi-toolchain" class="headerlink" title="arm-none-eabi toolchain"></a>arm-none-eabi toolchain</h2><p>apt直接安装方式只会安装gcc，而没有gdb。无法进行调试，而且版本很低。</p>
<p>从<a class="link"   href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads" >ARM官方下载链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载安装包（x86_64 Linux hosted cross toolchains 下面的 AArch32 bare-metal target)。最好不要下最新版本，可能会有bug。</p>
<p>解压后，将解压后文件夹的bin目录放入环境变量中</p>
<h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>绝大多数linux系统自带。如若没有，按照如下方式安装</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./SetupSTM32CubeMX-xx</span><br></pre></td></tr></table></figure></div>

<h2 id="openocd"><a href="#openocd" class="headerlink" title="openocd"></a>openocd</h2><p>apt直接安装的版本太老，使用cortex-debug调试时可能会有bug。</p>
<p>从<a class="link"   href="https://github.com/xpack-dev-tools/openocd-xpack/releases" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载linux-x64版本（例如：xpack-openocd-0.12.0-1-linux-x64.tar.gz ）<br>解压后，将解压后文件夹的bin目录放入环境变量中</p>
<h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><p>如若没有vscode，请参照<a class="link"   href="https://code.visualstudio.com/docs/setup/linux" >微软官方教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>安装</p>
<p>下载C&#x2F;c++插件和stm32-for-vscode插件<br>打开stm32-for-vscode插件，配置相应的路径（如果加入了环境变量，应该会自动配置）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/screenshot.png"
                     
                ><br>接上自己的调试器后，在stm32-for-vscode插件中测试编译、调试功能是否正常（点击调试按钮后，插件就会自动生成c_cpp_properties.json，vscode就不会代码报错了）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/screenshot_1.png"
                     
                ></p>
]]></content>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派4B安装Ubuntu18.04+ROS_Melodic并运行Cartogragher</title>
    <url>/2023/02/24/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E5%AE%89%E8%A3%85Ubuntu18-04-ROS-Melodic%E5%B9%B6%E8%BF%90%E8%A1%8CCartogragher/</url>
    <content><![CDATA[<h2 id="安装Ubuntu18-04"><a href="#安装Ubuntu18-04" class="headerlink" title="安装Ubuntu18.04"></a>安装Ubuntu18.04</h2><ol>
<li><p>下载ubuntu18.04镜像</p>
<p> 目前官方系统已经升级到ubuntu22.04LTS，官网页面没有提供历史版本的下载。所以本文从清华的开源镜像网站下载<a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cdimage/releases/bionic/release/" >ubuntu18.04镜像 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。目前只有server版，需要后面手动安装桌面。树莓派4B选择arm64+raspi4。<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230224213943.png"
                      alt="20230224213943"
                ></p>
</li>
<li><p>烧录镜像</p>
<p> 使用树莓派官方工具Raspberry Pi Imager烧录镜像。<a class="link"   href="https://www.raspberrypi.com/software/" >官网下载地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230224214326.png"
                      alt="20230224214326"
                ></p>
<p> 选择自定义镜像<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230224214509.png"
                      alt="20230224214509"
                ></p>
<p> 高级设置里面配置用户名、网络等信息<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230224214648.png"
                      alt="20230224214648"
                ><br> 点击烧录后等待烧录完成</p>
</li>
<li><p>将SD卡插入树莓派，连接HDMI显示器，启动树莓派。</p>
<p> 如果显示屏无信号，修改SD卡下的config.txt文件, 增加如下语句：</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hdmi_force_hotplug=1 <span class="comment">#强制使用HDMI输出（强行认为HDMI口已经插入了设备）</span></span><br><span class="line">config_hdmi_boost=4 <span class="comment">#HDMI信号增强。（1~9）</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>连接网络<br> 如果在烧录前正确配置了网路信息，此时应该可以成功连接网络。<br> 没有的话，可修改SD卡目录下的network-config文件。（注意：务必使用空格缩进）</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wifis:</span><br><span class="line">    wlan0:</span><br><span class="line">        access-points:</span><br><span class="line">        <span class="string">&quot;SSID&quot;</span>:</span><br><span class="line">            password: <span class="string">&quot;Password&quot;</span></span><br><span class="line">        dhcp4: <span class="literal">true</span></span><br><span class="line">        optional: <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<p> 如果上述操作仍无法连接网络，可开机后修改&#x2F;etc&#x2F;netplan&#x2F;50-cloud-init.yaml文件。</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">network:</span><br><span class="line">    version: 2</span><br><span class="line">    renderer: networkd</span><br><span class="line">    ethernets:</span><br><span class="line">        eth0:</span><br><span class="line">            dhcp4: <span class="literal">false</span></span><br><span class="line">            optional: <span class="literal">true</span></span><br><span class="line">    wifis:</span><br><span class="line">        wlan0:</span><br><span class="line">        access-points:</span><br><span class="line">            SSID:</span><br><span class="line">            password: Password</span><br><span class="line">        dhcp4: <span class="literal">false</span></span><br><span class="line">        optional: <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<p> 修改完成后执行下述命令</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo netplan generate</span><br><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改软件源</p>
<p> 修改&#x2F;etc&#x2F;apt&#x2F;sources.list，为如下内容（清华源，arm架构使用ubuntu-ports)</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure></div>

<p> 刷新软件源</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装桌面</p>
<p> 后期使用ROS的rviz, gazebo等仿真工具，需要桌面图形环境。本文选择ubuntu系统默认的desktop。</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ubuntu-desktop</span><br></pre></td></tr></table></figure></div>

<p> 安装完成后重启，就能看见图形界面了</p>
<p> 需要注意ubuntu图形界面采用NetworkManager进行网络管理，所以如需使用图形界面连接网络，需要将&#x2F;etc&#x2F;netplan&#x2F;50-cloud-init.yaml中的 renderer: networkd 改为 renderer: NetworkManager</p>
</li>
</ol>
<h2 id="安装ROS-Melodic-和-Cartograher"><a href="#安装ROS-Melodic-和-Cartograher" class="headerlink" title="安装ROS_Melodic 和 Cartograher"></a>安装ROS_Melodic 和 Cartograher</h2><ol>
<li><p>参照<a class="link"   href="http://wiki.ros.org/melodic/Installation/Ubuntu" >ROS官网教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 安装</p>
<p> 其中sudo rosdep init 需要科学上网，并更改dns（或修改hosts）</p>
</li>
<li><p>参照<a class="link"   href="https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html" >Cartograher官网教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 安装</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">rosdep install --from-paths src --ignore-src --rosdistro=<span class="variable">$&#123;ROS_DISTRO&#125;</span> -y</span><br></pre></td></tr></table></figure></div>

<p> 执行会出错。你需要删除或者注释在cartographer包下(不是cartographer_ros) package.xml文件里的(<depend>libabsl-dev</depend>)。</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">catkin_make_isolated --install --use-ninja</span><br></pre></td></tr></table></figure></div>

<p> 执行到中间会卡死。原因是没有设置swap分区，导致内存不足。根据<a class="link"   href="https://shumeipai.nxez.com/2017/12/18/how-to-modify-raspberry-pi-swap-partition.html" >修改树莓派交换分区 SWAP 的正确姿势 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>这篇博客设置即可</p>
</li>
<li><p>运行cartograher示例</p>
<p> Download and launch the 2D backpack demo（执行前需要source devel_isolated目录下的setup.bash）</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget -P ~/Downloads https://storage.googleapis.com/cartographer-public-data/bags/backpack_2d/cartographer_paper_deutsches_museum.bag</span><br><span class="line">roslaunch cartographer_ros demo_backpack_2d.launch bag_filename:=<span class="variable">$&#123;HOME&#125;</span>/Downloads/cartographer_paper_deutsches_museum.bag</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230224224554.png"
                      alt="20230224224554"
                ></p>
</li>
</ol>
<h2 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h2><ol>
<li><p>打开ubuntu自带的远程桌面<br> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-1305582579.cos.ap-chengdu.myqcloud.com/20230224222809.png"
                      alt="20230224222809"
                ></p>
<p> 或者使用命令行</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/lib/vino/vino-server --display=:0</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在本地电脑上启动 Vnc Client，输入IP地址连接</p>
</li>
<li><p>为了后面能够无需显示器，开机后就可以连接远程桌面。还需要设置<a class="link"   href="https://blog.csdn.net/mbdong/article/details/114069882" >自动登录 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和<a class="link"   href="https://askubuntu.com/questions/1033436/how-to-use-ubuntu-18-04-on-vnc-without-display-attached" >虚拟显示器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>SLAM</tag>
      </tags>
  </entry>
</search>
